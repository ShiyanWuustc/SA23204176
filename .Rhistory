library(SA23204176)
#数据生成：考虑Almon双指数MIDAS模型
theta1=7*10^(-4)
theta2=-6*10^(-3)
n=200
x.sim<-matrix(arima.sim(model=list(ar=0.5), n=k*(n+3)), ncol=k,byrow = TRUE)
library(SA23204176)
#数据生成：考虑Almon双指数MIDAS模型
theta1=7*10^(-4)
theta2=-6*10^(-3)
n=200
x.sim<-matrix(arima.sim(model=list(ar=0.5), n=k*(n+3)), ncol=k,byrow = TRUE)
library(SA23204176)
#数据生成：考虑Almon双指数MIDAS模型
theta1=7*10^(-4)
theta2=-6*10^(-3)
n=200
l=4
x.sim<-matrix(arima.sim(model=list(ar=0.5), n=l*(n+3)), ncol=k,byrow = TRUE)
library(SA23204176)
#数据生成：考虑Almon双指数MIDAS模型
theta1=7*10^(-4)
theta2=-6*10^(-3)
n=200
l=4
x.sim<-matrix(arima.sim(model=list(ar=0.5), n=l*(n+3)), ncol=k,byrow = TRUE)
library(SA23204176)
#数据生成：考虑Almon双指数MIDAS模型
theta1=7*10^(-4)
theta2=-6*10^(-3)
n=200
l=4
x.sim<-matrix(arima.sim(model=list(ar=0.5), n=l*(n+3)), ncol=k,byrow = TRUE)
library(SA23204176)
#数据生成：考虑Almon双指数MIDAS模型
theta1=7*10^(-4)
theta2=-6*10^(-3)
n=200
l=4
x.sim<-matrix(arima.sim(model=list(ar=0.5), n=l*(n+3)), ncol=l,byrow = TRUE)
x<-cbind(x.sim[1:(n+2),],x.sim[2:(n+3),])
beta<-exp(theta1*seq(2*l)+theta2*seq(2*l)^2)/sum(exp(theta1*seq(2*l)+theta2*seq(2*l)^2))
y=rep(0,n+2)
for( i in 2:(n+2)) {
y[i]=0.5+-0.2*y[i-1] + 1.7*x[i,]%*%beta
}
MIFVMA(y=y,x=x,per=0.7,k=5)
library(SA23204176)
#数据生成：考虑Almon双指数MIDAS模型
theta1=7*10^(-4)
theta2=-6*10^(-3)
n=200
l=4
x.sim<-matrix(arima.sim(model=list(ar=0.5), n=l*(n+3)), ncol=l,byrow = TRUE)
x<-cbind(x.sim[1:(n+2),],x.sim[2:(n+3),])
beta<-exp(theta1*seq(2*l)+theta2*seq(2*l)^2)/sum(exp(theta1*seq(2*l)+theta2*seq(2*l)^2))
y=rep(0,n+2)
for( i in 2:(n+2)) {
y[i]=0.5+-0.2*y[i-1] + 1.7*x[i,]%*%beta
}
MIFVMA(y=y,x=x,per=0.7,k=5)
library(SA23204176)
#数据生成：考虑Almon双指数MIDAS模型
theta1=7*10^(-4)
theta2=-6*10^(-3)
n=200
l=4
x.sim<-matrix(arima.sim(model=list(ar=0.5), n=l*(n+3)), ncol=l,byrow = TRUE)
x<-cbind(x.sim[1:(n+2),],x.sim[2:(n+3),])
beta<-exp(theta1*seq(2*l)+theta2*seq(2*l)^2)/sum(exp(theta1*seq(2*l)+theta2*seq(2*l)^2))
y=rep(0,n+2)
for( i in 2:(n+2)) {
y[i]=0.5+-0.2*y[i-1] + 1.7*x[i,]%*%beta
}
#MIFVMA函数使用
MIFVMA(y=y,x=x,per=0.7,k=5)
devtools::build_vignettes()
devtools::document()
.Last.error.trace
.Last.error
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::build_vignettes()
data <- rnorm(100)
bootstrap_results <- boots(data, 1000)
bootstrap_results
bootstrap_results
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
library(SA23204176)
data <- rnorm(100)
bootstrap_results <-boots(data, 1000)
bootstrap_results
library(SA23204176)
data <- rnorm(100)
bootstrap_results <-boots(data, 1000)
bootstrap_results
RayRandom=Rayleigh(m=2000,sigma=4,b=100)
RayRandom=Rayleigh(m=2000,sigma=4,b=100)
head(Rayleigh)
RayRandom=Rayleigh(m=2000,sigma=4,b=100)
head(RaylRandom)
RayRandom=Rayleigh(m=2000,sigma=4,b=100)
head(RayRandom)
RayRandom
RayRandom=Rayleigh(m=2000,sigma=2,b=100)
head(RayRandom)
RayRandom=Rayleigh(m=2000,sigma=6,b=100)
head(RayRandom)
RayRandom=Rayleigh(m=2000,sigma=0.5,b=100)
head(RayRandom)
RayRandom=Rayleigh(m=2000,sigma=1,b=100)
head(RayRandom)
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build_vignettes()
library(microbenchmark)
data <- rnorm(100)
bootsR <- function(x,B){
thetastar <- numeric(B)
theta <- mean(x)
for(b in 1:B){
xstar <- sample(x,replace=TRUE)
thetastar[b] <- mean(xstar)
}
return(c(bias=mean(thetastar)-theta,se.boot=sd(thetastar),se.samp=sd(x)/sqrt(length(x))))
}
tm2 <- microbenchmark(
vR = bootsR(data, 100000),
vC = boots(data, 100000)
)
library(microbenchmark)
data <- rnorm(100)
bootsR <- function(x,B){
thetastar <- numeric(B)
theta <- mean(x)
for(b in 1:B){
xstar <- sample(x,replace=TRUE)
thetastar[b] <- mean(xstar)
}
return(c(bias=mean(thetastar)-theta,se.boot=sd(thetastar),se.samp=sd(x)/sqrt(length(x))))
}
tm2 <- microbenchmark(
vR = bootsR(data, 10000),
vC = boots(data, 10000)
)
library(microbenchmark)
data <- rnorm(100)
bootsR <- function(x,B){
thetastar <- numeric(B)
theta <- mean(x)
for(b in 1:B){
xstar <- sample(x,replace=TRUE)
thetastar[b] <- mean(xstar)
}
return(c(bias=mean(thetastar)-theta,se.boot=sd(thetastar),se.samp=sd(x)/sqrt(length(x))))
}
tm2 <- microbenchmark(
vR = bootsR(data, 100),
vC = boots(data, 100)
)
knitr::kable(summary(tm2)[,c(1,3,5,6)])
library(microbenchmark)
data <- rnorm(100)
bootsR <- function(x,B){
thetastar <- numeric(B)
theta <- mean(x)
for(b in 1:B){
xstar <- sample(x,replace=TRUE)
thetastar[b] <- mean(xstar)
}
return(c(bias=mean(thetastar)-theta,se.boot=sd(thetastar),se.samp=sd(x)/sqrt(length(x))))
}
tm2 <- microbenchmark(
vR = bootsR(data, 100),
vC = boots(data, 100)
)
knitr::kable(summary(tm2)[,c(1,3,5,6)])
library(microbenchmark)
data <- rnorm(100)
bootsR <- function(x,B){
thetastar <- numeric(B)
theta <- mean(x)
for(b in 1:B){
xstar <- sample(x,replace=TRUE)
thetastar[b] <- mean(xstar)
}
return(c(bias=mean(thetastar)-theta,se.boot=sd(thetastar),se.samp=sd(x)/sqrt(length(x))))
}
tm2 <- microbenchmark(
vR = bootsR(data, 100),
vC = boots(data, 100)
)
knitr::kable(summary(tm2)[,c(1,3,5,6)])
library(microbenchmark)
data <- rnorm(100)
#R函数
bootsR <- function(x,B){
thetastar <- numeric(B)
theta <- mean(x)
for(b in 1:B){
xstar <- sample(x,replace=TRUE)
thetastar[b] <- mean(xstar)
}
return(c(bias=mean(thetastar)-theta,se.boot=sd(thetastar),se.samp=sd(x)/sqrt(length(x))))
}
tm2 <- microbenchmark(
vR = bootsR(data, 1000),
vC = boots(data, 1000)
)
knitr::kable(summary(tm2)[,c(1,3,5,6)])
f <- function(x, sigma) {
if (any(x < 0)) return (0)
stopifnot(sigma > 0)
return((x / sigma^2) * exp(-x^2 / (2*sigma^2)))
}
RayleighR <- function(m,sigma,b){
sigma <- 4
x <- numeric(m)
x[1] <- rchisq(1, df=1)
k <- 0
u <- runif(m)
for (i in 2:m) {
xt <- x[i-1]
y <- rchisq(1, df = xt)
num <- f(y, sigma) * dchisq(xt, df = y)
den <- f(xt, sigma) * dchisq(y, df = xt)
if (u[i] <= num/den){
x[i] <- y
} else {
x[i] <- xt
k <- k+1     #y is rejected
}
}
chain <- x[(b+1):m]
return(chain)
}
tm2 <- microbenchmark(
vR = RayleighR(1000),
vC = Rayleigh(1000)
)
f <- function(x, sigma) {
if (any(x < 0)) return (0)
stopifnot(sigma > 0)
return((x / sigma^2) * exp(-x^2 / (2*sigma^2)))
}
RayleighR <- function(m,sigma,b){
sigma <- 4
x <- numeric(m)
x[1] <- rchisq(1, df=1)
k <- 0
u <- runif(m)
for (i in 2:m) {
xt <- x[i-1]
y <- rchisq(1, df = xt)
num <- f(y, sigma) * dchisq(xt, df = y)
den <- f(xt, sigma) * dchisq(y, df = xt)
if (u[i] <= num/den){
x[i] <- y
} else {
x[i] <- xt
k <- k+1     #y is rejected
}
}
chain <- x[(b+1):m]
return(chain)
}
tm2 <- microbenchmark(
vR = RayleighR(10000,1,2000),
vC = Rayleigh(10000,1,2000)
)
f <- function(x, sigma) {
if (any(x < 0)) return (0)
stopifnot(sigma > 0)
return((x / sigma^2) * exp(-x^2 / (2*sigma^2)))
}
RayleighR <- function(m,sigma,b){
sigma <- 4
x <- numeric(m)
x[1] <- rchisq(1, df=1)
k <- 0
u <- runif(m)
for (i in 2:m) {
xt <- x[i-1]
y <- rchisq(1, df = xt)
num <- f(y, sigma) * dchisq(xt, df = y)
den <- f(xt, sigma) * dchisq(y, df = xt)
if (u[i] <= num/den){
x[i] <- y
} else {
x[i] <- xt
k <- k+1     #y is rejected
}
}
chain <- x[(b+1):m]
return(chain)
}
tm2 <- microbenchmark(
vR = RayleighR(5e3,1,2e3),
vC = Rayleigh(5e3,1,2e3)
)
knitr::kable(summary(tm2)[,c(1,3,5,6)])
devtools::document()
devtools::build_vignettes()
f <- function(x, sigma) {
if (any(x < 0)) return (0)
stopifnot(sigma > 0)
return((x / sigma^2) * exp(-x^2 / (2*sigma^2)))
}
RayleighR <- function(m,sigma,b){
sigma <- 4
x <- numeric(m)
x[1] <- rchisq(1, df=1)
k <- 0
u <- runif(m)
for (i in 2:m) {
xt <- x[i-1]
y <- rchisq(1, df = xt)
num <- f(y, sigma) * dchisq(xt, df = y)
den <- f(xt, sigma) * dchisq(y, df = xt)
if (u[i] <= num/den){
x[i] <- y
} else {
x[i] <- xt
k <- k+1     #y is rejected
}
}
chain <- x[(b+1):m]
return(chain)
}
tm2 <- microbenchmark(
vR = RayleighR(5e3,1,2e3),
vC = Rayleigh(5e3,1,2e3)
)
knitr::kable(summary(tm2)[,c(1,3,5,6)])
devtools::build_vignettes()
library(Rcpp)
library(SA23204176)
NumericVector boots(NumericVector x,int B) {
library(Rcpp)
library(SA23204176)
data <- rnorm(100)
bootstrap_results <-boots(data, 1000)
bootstrap_results
devtools::build_vignettes()
library(Rcpp)
library(SA23204176)
data <- rnorm(100)
bootstrap_results <-boots(data, 1000)
bootstrap_results
library(Rcpp)
library(SA23204176)
data <- rnorm(100)
bootstrap_results <-boots(data, 1000)
bootstrap_results
library(microbenchmark)
data <- rnorm(100)
#R函数
bootsR <- function(x,B){
thetastar <- numeric(B)
theta <- mean(x)
for(b in 1:B){
xstar <- sample(x,replace=TRUE)
thetastar[b] <- mean(xstar)
}
return(c(bias=mean(thetastar)-theta,se.boot=sd(thetastar),se.samp=sd(x)/sqrt(length(x))))
}
tm2 <- microbenchmark(
vR = bootsR(data, 1000),
vC = boots(data, 1000)
)
knitr::kable(summary(tm2)[,c(1,3,5,6)])
devtools::document()
devtools::document()
devtools::document()
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
.Last.error
devtools::document()
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::build_vignettes()
devtools::document()
library(Rcpp)
library(SA23204176)
library(Rcpp)
library(SA23204176)
library(SA23204176)
library(SA23204176)
devtools::document()
library(SA23204176)
library(Rcpp)
library(SA23204176)
data <- rnorm(100)
bootstrap_results <-SA23204176::boots(data, 1000)
library(Rcpp)
library(SA23204176)
data <- rnorm(100)
bootstrap_results <-boots(data, 1000)
bootstrap_results
library(microbenchmark)
data <- rnorm(100)
#R函数
bootsR <- function(x,B){
thetastar <- numeric(B)
theta <- mean(x)
for(b in 1:B){
xstar <- sample(x,replace=TRUE)
thetastar[b] <- mean(xstar)
}
return(c(bias=mean(thetastar)-theta,se.boot=sd(thetastar),se.samp=sd(x)/sqrt(length(x))))
}
tm2 <- microbenchmark(
vR = bootsR(data, 1000),
vC = boots(data, 1000)
)
knitr::kable(summary(tm2)[,c(1,3,5,6)])
NumericVector boots(NumericVector x,int B) {
library(SA23204176)
#数据生成：考虑Almon双指数MIDAS模型
theta1=7*10^(-4)
theta2=-6*10^(-3)
n=200
l=4
x.sim<-matrix(arima.sim(model=list(ar=0.5), n=l*(n+3)), ncol=l,byrow = TRUE)
x<-cbind(x.sim[1:(n+2),],x.sim[2:(n+3),])
beta<-exp(theta1*seq(2*l)+theta2*seq(2*l)^2)/sum(exp(theta1*seq(2*l)+theta2*seq(2*l)^2))
y=rep(0,n+2)
for( i in 2:(n+2)) {
y[i]=0.5+-0.2*y[i-1] + 1.7*x[i,]%*%beta
}
#MIFVMA函数使用
MIFVMA(y=y,x=x,per=0.7,k=5)
devtools::build_vignettes()
library(Rcpp)
library(SA23204176)
library(boots)
devtools::document()
library(Rcpp)
library(SA23204176)
data <- rnorm(100)
bootstrap_results <-boots(data, 1000)
bootstrap_results
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
devtools::document
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::build_vignettes()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
devtools::check()
f <- function(x) log(x + sqrt(x ^ 2 + 1))
(dy <- Deriv::Deriv(f, "x"))
library(Deriv)
f <- function(x) log(x + sqrt(x ^ 2 + 1))
(dy <- Deriv(f, "x"))
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::document()
devtools::check()
devtools::build(vignettes=FALSE)
install.packages('D:/code/Computation/SA23204176_1.0.tar.gz',repo=NULL)
devtools::build(vignettes=FALSE)
devtools::build(vignettes=FALSE)
